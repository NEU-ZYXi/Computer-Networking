
5.6 TCP可靠传输的实现
  (1). 以字节为单位的滑动窗口
    发送方根据接收方发来的确认报文段中的窗口值和确认号，能够确定滑动窗口的范围
    1). 发送窗口后沿的后面部分表示已发送且已收到了确认，这些数据不需要再保留了
        发送窗口前沿的前面部分表示不允许发送的，因为接收方还没有为这部分数据保留临时存放的缓存空间
    2). 发送窗口的位置由窗口前沿和后沿的位置共同确定
        后沿的变化情况：I. 不动，即没有收到新的确认
                     II. 前移，即收到了新的确认
        前沿的变化情况：I. 前移
                     II. 不动，即没有收到新的确认，或收到了新的确认但对方通知的窗口缩小了，使发送窗口前沿正好不动
                     III. 收缩，即对方通知的窗口缩小，使已发送的数据不允许发送，会导致错误
    3). I. 发送缓存：用来暂时存放发送应用程序传送给发送方TCP准备发送的数据，和TCP已发送但尚未收到确认的数据
           发送窗口是发送缓存的一部分，两者的后沿是重合的
        II. 接收缓存：用来暂时存放按序到达的但尚未被接收应用程序读取的数据，和未按序到达的数据
            如果接收应用程序来不及读取收到的数据，接收缓存最终会被填满，使接收窗口减小到零
            如果接收应用程序能够及时从接收缓存中读取收到的数据，可以增大接收窗口
            
  (2). 超时重传时间的选择
    超时重传时间若设置得太短，会导致不必要的重传，使网络负荷增大
    超时重传时间若设置得太长，会使网络的空闲时间增大，降低传输效率
    
    TCP采用一种自适应算法，记录一个报文段发出的时间，和收到确认的时间，时间差称为报文段的往返时间RTT(round-trip time)
    进一步有RTTs(round-trip time smoothed)，称为加权平均往返时间
    超时重传时间RTO(retransmission time-out)应略大于RTTs，为RTO=RTTs+4*RTTd，其中RTTd为偏差的加权平均值
    
    当发送方进行了重传报文段后，收到确认时，应判断该确认是对原报文段的确认还是对重传报文段的确认
    1). 若被错误判定为是对原报文段的确认，导致RTTs和RTO偏大
    2). 若被错误判定为是对重传报文段的确认，导致RTTs和RTO偏小，使之后的报文段可能进行过多的重传
    Karn算法：在计算RTTs时，只要报文段重传了，就不采用其往返时间样本，使结果较为准确，但会忽略某些突然变化的情况从而无法更新超时重传时间
    修正Karn算法：报文段每重传一次，就把超时重传时间RTO增大一些
    
  (3). 选择确认SACK
    当收到的报文段无差错，只是未按序号，或中间缺少一些序号的数据时，使用选择确认(selective ACK)的方法可以只重传缺少的数据
    在报文段的首部增加SACK选项，用于报告收到的不连续的字节块的边界，即可在重传时只传送边界之间缺少的数据
    
    
        
  
